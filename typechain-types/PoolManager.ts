/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolManagerInterface extends utils.Interface {
  contractName: "PoolManager";
  functions: {
    "addDetermination(address)": FunctionFragment;
    "approvePool()": FunctionFragment;
    "calcTokenToBurn(uint256)": FunctionFragment;
    "determinationContractAddress()": FunctionFragment;
    "disapprovePool()": FunctionFragment;
    "getSubgraphTimeseriesDataPoint(address,uint256)": FunctionFragment;
    "initializePoolTokens(address,uint256)": FunctionFragment;
    "latestSubgraphTimeseries(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "percent(uint256,uint256,uint256)": FunctionFragment;
    "poolApproved()": FunctionFragment;
    "poolInteraction(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveContractAddress()": FunctionFragment;
    "setReserveContractAddress(address)": FunctionFragment;
    "setSubgraphTimeseriesDataPoint(address,uint256,bytes32)": FunctionFragment;
    "simulatePoolActivity()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "title()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userDeposit(uint256)": FunctionFragment;
    "userToDeposits(address)": FunctionFragment;
    "userWithdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDetermination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenToBurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "determinationContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disapprovePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubgraphTimeseriesDataPoint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePoolTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestSubgraphTimeseries",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInteraction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubgraphTimeseriesDataPoint",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulatePoolActivity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userToDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDetermination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenToBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determinationContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disapprovePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubgraphTimeseriesDataPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestSubgraphTimeseries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "percent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubgraphTimeseriesDataPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulatePoolActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdraw",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalChanged(bool)": EventFragment;
    "EpToken(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenCount(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCount"): EventFragment;
}

export type ApprovalChangedEvent = TypedEvent<
  [boolean],
  { isApproved: boolean }
>;

export type ApprovalChangedEventFilter = TypedEventFilter<ApprovalChangedEvent>;

export type EpTokenEvent = TypedEvent<[string], { pToken: string }>;

export type EpTokenEventFilter = TypedEventFilter<EpTokenEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokenCountEvent = TypedEvent<[BigNumber], { tokens: BigNumber }>;

export type TokenCountEventFilter = TypedEventFilter<TokenCountEvent>;

export interface PoolManager extends BaseContract {
  contractName: "PoolManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDetermination(
      determinationContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcTokenToBurn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    determinationContractAddress(overrides?: CallOverrides): Promise<[string]>;

    disapprovePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePoolTokens(
      senderAddress: string,
      initialDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestSubgraphTimeseries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percent(
      numerator: BigNumberish,
      denominator: BigNumberish,
      precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quotient: BigNumber }>;

    poolApproved(overrides?: CallOverrides): Promise<[boolean]>;

    poolInteraction(
      tokenAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveContractAddress(overrides?: CallOverrides): Promise<[string]>;

    setReserveContractAddress(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      dataPoint: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simulatePoolActivity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    title(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userToDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDetermination(
    determinationContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcTokenToBurn(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  determinationContractAddress(overrides?: CallOverrides): Promise<string>;

  disapprovePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSubgraphTimeseriesDataPoint(
    subgraphContractAddress: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePoolTokens(
    senderAddress: string,
    initialDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestSubgraphTimeseries(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  percent(
    numerator: BigNumberish,
    denominator: BigNumberish,
    precision: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolApproved(overrides?: CallOverrides): Promise<boolean>;

  poolInteraction(
    tokenAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveContractAddress(overrides?: CallOverrides): Promise<string>;

  setReserveContractAddress(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSubgraphTimeseriesDataPoint(
    subgraphContractAddress: string,
    index: BigNumberish,
    dataPoint: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simulatePoolActivity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  title(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDeposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userToDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userWithdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDetermination(
      determinationContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvePool(overrides?: CallOverrides): Promise<void>;

    calcTokenToBurn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    determinationContractAddress(overrides?: CallOverrides): Promise<string>;

    disapprovePool(overrides?: CallOverrides): Promise<void>;

    getSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initializePoolTokens(
      senderAddress: string,
      initialDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    latestSubgraphTimeseries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    percent(
      numerator: BigNumberish,
      denominator: BigNumberish,
      precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolApproved(overrides?: CallOverrides): Promise<boolean>;

    poolInteraction(
      tokenAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveContractAddress(overrides?: CallOverrides): Promise<string>;

    setReserveContractAddress(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      dataPoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    simulatePoolActivity(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    title(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userDeposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userToDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalChanged(bool)"(isApproved?: null): ApprovalChangedEventFilter;
    ApprovalChanged(isApproved?: null): ApprovalChangedEventFilter;

    "EpToken(address)"(pToken?: null): EpTokenEventFilter;
    EpToken(pToken?: null): EpTokenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenCount(uint256)"(tokens?: null): TokenCountEventFilter;
    TokenCount(tokens?: null): TokenCountEventFilter;
  };

  estimateGas: {
    addDetermination(
      determinationContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcTokenToBurn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    determinationContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    disapprovePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePoolTokens(
      senderAddress: string,
      initialDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestSubgraphTimeseries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percent(
      numerator: BigNumberish,
      denominator: BigNumberish,
      precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolApproved(overrides?: CallOverrides): Promise<BigNumber>;

    poolInteraction(
      tokenAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setReserveContractAddress(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      dataPoint: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simulatePoolActivity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    title(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userToDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDetermination(
      determinationContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcTokenToBurn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    determinationContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disapprovePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePoolTokens(
      senderAddress: string,
      initialDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestSubgraphTimeseries(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percent(
      numerator: BigNumberish,
      denominator: BigNumberish,
      precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInteraction(
      tokenAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setReserveContractAddress(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSubgraphTimeseriesDataPoint(
      subgraphContractAddress: string,
      index: BigNumberish,
      dataPoint: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simulatePoolActivity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDeposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userToDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
