/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ProtocolReserveManagerV2Interface extends utils.Interface {
  contractName: "ProtocolReserveManagerV2";
  functions: {
    "_isContract(address)": FunctionFragment;
    "acctProtocolRevenueCalculation(address)": FunctionFragment;
    "cummulativeReserveFactor(uint256)": FunctionFragment;
    "deditatedWam()": FunctionFragment;
    "deployPoolContract(address,bytes32,uint256,address,bytes32)": FunctionFragment;
    "deployTestToken()": FunctionFragment;
    "findSwapPool(address)": FunctionFragment;
    "protocolToken()": FunctionFragment;
    "revenueAvailableByUser(address)": FunctionFragment;
    "titleToPool(bytes32)": FunctionFragment;
    "transferRevenueAsWETH(address,address,uint256)": FunctionFragment;
    "uniswapPoolCache(address)": FunctionFragment;
    "userToLastUpdateNonce(address)": FunctionFragment;
    "withdrawRevenues(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_isContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "acctProtocolRevenueCalculation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cummulativeReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deditatedWam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployPoolContract",
    values: [string, BytesLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTestToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findSwapPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueAvailableByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "titleToPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRevenueAsWETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPoolCache",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToLastUpdateNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRevenues",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_isContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acctProtocolRevenueCalculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cummulativeReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deditatedWam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPoolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueAvailableByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "titleToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRevenueAsWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPoolCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToLastUpdateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRevenues",
    data: BytesLike
  ): Result;

  events: {
    "PoolContractDeployed(address)": EventFragment;
    "TestTokenDeployed(address)": EventFragment;
    "TokensWithdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestTokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
}

export type PoolContractDeployedEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type PoolContractDeployedEventFilter =
  TypedEventFilter<PoolContractDeployedEvent>;

export type TestTokenDeployedEvent = TypedEvent<
  [string],
  { tokenAddress: string }
>;

export type TestTokenDeployedEventFilter =
  TypedEventFilter<TestTokenDeployedEvent>;

export type TokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface ProtocolReserveManagerV2 extends BaseContract {
  contractName: "ProtocolReserveManagerV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProtocolReserveManagerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isContract(
      _a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acctProtocolRevenueCalculation(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cummulativeReserveFactor(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deditatedWam(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployPoolContract(
      depositToken: string,
      title: BytesLike,
      initialDepositAmount: BigNumberish,
      subgraphPivotTarget: string,
      poolIdPivotTarget: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTestToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findSwapPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolToken(overrides?: CallOverrides): Promise<[string]>;

    revenueAvailableByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    titleToPool(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    transferRevenueAsWETH(
      pool: string,
      revenueToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapPoolCache(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawRevenues(
      amount: BigNumberish,
      revenueToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _isContract(
    _a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acctProtocolRevenueCalculation(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cummulativeReserveFactor(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deditatedWam(overrides?: CallOverrides): Promise<BigNumber>;

  deployPoolContract(
    depositToken: string,
    title: BytesLike,
    initialDepositAmount: BigNumberish,
    subgraphPivotTarget: string,
    poolIdPivotTarget: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTestToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findSwapPool(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolToken(overrides?: CallOverrides): Promise<string>;

  revenueAvailableByUser(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  titleToPool(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  transferRevenueAsWETH(
    pool: string,
    revenueToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapPoolCache(arg0: string, overrides?: CallOverrides): Promise<string>;

  userToLastUpdateNonce(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawRevenues(
    amount: BigNumberish,
    revenueToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _isContract(_a: string, overrides?: CallOverrides): Promise<boolean>;

    acctProtocolRevenueCalculation(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cummulativeReserveFactor(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deditatedWam(overrides?: CallOverrides): Promise<BigNumber>;

    deployPoolContract(
      depositToken: string,
      title: BytesLike,
      initialDepositAmount: BigNumberish,
      subgraphPivotTarget: string,
      poolIdPivotTarget: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deployTestToken(overrides?: CallOverrides): Promise<void>;

    findSwapPool(token: string, overrides?: CallOverrides): Promise<string>;

    protocolToken(overrides?: CallOverrides): Promise<string>;

    revenueAvailableByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    titleToPool(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    transferRevenueAsWETH(
      pool: string,
      revenueToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniswapPoolCache(arg0: string, overrides?: CallOverrides): Promise<string>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRevenues(
      amount: BigNumberish,
      revenueToken: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PoolContractDeployed(address)"(
      contractAddress?: null
    ): PoolContractDeployedEventFilter;
    PoolContractDeployed(
      contractAddress?: null
    ): PoolContractDeployedEventFilter;

    "TestTokenDeployed(address)"(
      tokenAddress?: null
    ): TestTokenDeployedEventFilter;
    TestTokenDeployed(tokenAddress?: null): TestTokenDeployedEventFilter;

    "TokensWithdrawn(address,address,uint256)"(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
  };

  estimateGas: {
    _isContract(
      _a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acctProtocolRevenueCalculation(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cummulativeReserveFactor(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deditatedWam(overrides?: CallOverrides): Promise<BigNumber>;

    deployPoolContract(
      depositToken: string,
      title: BytesLike,
      initialDepositAmount: BigNumberish,
      subgraphPivotTarget: string,
      poolIdPivotTarget: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTestToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findSwapPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolToken(overrides?: CallOverrides): Promise<BigNumber>;

    revenueAvailableByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    titleToPool(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferRevenueAsWETH(
      pool: string,
      revenueToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapPoolCache(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRevenues(
      amount: BigNumberish,
      revenueToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isContract(
      _a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acctProtocolRevenueCalculation(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cummulativeReserveFactor(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deditatedWam(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployPoolContract(
      depositToken: string,
      title: BytesLike,
      initialDepositAmount: BigNumberish,
      subgraphPivotTarget: string,
      poolIdPivotTarget: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTestToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findSwapPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revenueAvailableByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    titleToPool(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferRevenueAsWETH(
      pool: string,
      revenueToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapPoolCache(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRevenues(
      amount: BigNumberish,
      revenueToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
