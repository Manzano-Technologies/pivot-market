/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SubgraphManagerInterface extends utils.Interface {
  contractName: "SubgraphManager";
  functions: {
    "approveSubgraph()": FunctionFragment;
    "currentPositionBalance(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "disapproveSubgraph()": FunctionFragment;
    "emergencyFundWithdraw(address)": FunctionFragment;
    "getDepositAddressByPoolId(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolToDepositAmounts(address)": FunctionFragment;
    "poolToDepositHoldingRegistry(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSubgraphQueryURI(bytes32)": FunctionFragment;
    "subgraphApproved()": FunctionFragment;
    "subgraphQueryURI()": FunctionFragment;
    "targetVerifier(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateroyaltyUser(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawToPoolAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveSubgraph",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPositionBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disapproveSubgraph",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyFundWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAddressByPoolId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolToDepositAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolToDepositHoldingRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSubgraphQueryURI",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subgraphApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subgraphQueryURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateroyaltyUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToPoolAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveSubgraph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPositionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disapproveSubgraph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFundWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAddressByPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolToDepositAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolToDepositHoldingRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubgraphQueryURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subgraphApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subgraphQueryURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateroyaltyUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToPoolAddress",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalChanged(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ApprovalChangedEvent = TypedEvent<
  [boolean],
  { isApproved: boolean }
>;

export type ApprovalChangedEventFilter = TypedEventFilter<ApprovalChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SubgraphManager extends BaseContract {
  contractName: "SubgraphManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubgraphManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveSubgraph(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPositionBalance(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disapproveSubgraph(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyFundWithdraw(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDepositAddressByPoolId(
      pivotTargetPoolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolToDepositAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolToDepositHoldingRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSubgraphQueryURI(
      URI: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subgraphApproved(overrides?: CallOverrides): Promise<[boolean]>;

    subgraphQueryURI(overrides?: CallOverrides): Promise<[string]>;

    targetVerifier(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateroyaltyUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToPoolAddress(
      destinationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveSubgraph(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPositionBalance(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disapproveSubgraph(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyFundWithdraw(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDepositAddressByPoolId(
    pivotTargetPoolId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolToDepositAmounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolToDepositHoldingRegistry(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSubgraphQueryURI(
    URI: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subgraphApproved(overrides?: CallOverrides): Promise<boolean>;

  subgraphQueryURI(overrides?: CallOverrides): Promise<string>;

  targetVerifier(
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateroyaltyUser(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToPoolAddress(
    destinationAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveSubgraph(overrides?: CallOverrides): Promise<void>;

    currentPositionBalance(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    disapproveSubgraph(overrides?: CallOverrides): Promise<void>;

    emergencyFundWithdraw(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepositAddressByPoolId(
      pivotTargetPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolToDepositAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolToDepositHoldingRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSubgraphQueryURI(
      URI: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    subgraphApproved(overrides?: CallOverrides): Promise<boolean>;

    subgraphQueryURI(overrides?: CallOverrides): Promise<string>;

    targetVerifier(
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateroyaltyUser(user: string, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    withdrawToPoolAddress(
      destinationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalChanged(bool)"(isApproved?: null): ApprovalChangedEventFilter;
    ApprovalChanged(isApproved?: null): ApprovalChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveSubgraph(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPositionBalance(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disapproveSubgraph(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyFundWithdraw(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDepositAddressByPoolId(
      pivotTargetPoolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolToDepositAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolToDepositHoldingRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSubgraphQueryURI(
      URI: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subgraphApproved(overrides?: CallOverrides): Promise<BigNumber>;

    subgraphQueryURI(overrides?: CallOverrides): Promise<BigNumber>;

    targetVerifier(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateroyaltyUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToPoolAddress(
      destinationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveSubgraph(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPositionBalance(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disapproveSubgraph(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyFundWithdraw(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDepositAddressByPoolId(
      pivotTargetPoolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToDepositAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolToDepositHoldingRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSubgraphQueryURI(
      URI: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subgraphApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subgraphQueryURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetVerifier(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateroyaltyUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToPoolAddress(
      destinationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
