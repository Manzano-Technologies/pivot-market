/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenReservesInterface extends utils.Interface {
  contractName: "TokenReserves";
  functions: {
    "cummulativeReserveProportion(uint256)": FunctionFragment;
    "depositFees(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUSDCPriceFeed(address,address)": FunctionFragment;
    "tokenBalances(address)": FunctionFragment;
    "tokenToUSDCPriceFeed(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTokenReserves(address)": FunctionFragment;
    "userRewardsAccumulation(address,uint256)": FunctionFragment;
    "userToLastUpdateNonce(address)": FunctionFragment;
    "userToRewardsToCollect(address)": FunctionFragment;
    "withdrawRevenues(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cummulativeReserveProportion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDCPriceFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToUSDCPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenReserves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardsAccumulation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userToLastUpdateNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToRewardsToCollect",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRevenues",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cummulativeReserveProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUSDCPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardsAccumulation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToLastUpdateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToRewardsToCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRevenues",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensDeposited(address,address,uint256)": EventFragment;
    "TokensWithdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokensDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; depositor: string; amount: BigNumber }
>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export type TokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface TokenReserves extends BaseContract {
  contractName: "TokenReserves";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenReservesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cummulativeReserveProportion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositFees(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSDCPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        usdcReserves: BigNumber;
      }
    >;

    tokenToUSDCPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenReserves(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRewardsAccumulation(
      user: string,
      userTokenBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userToRewardsToCollect(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawRevenues(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cummulativeReserveProportion(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositFees(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSDCPriceFeed(
    token: string,
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { totalAmount: BigNumber; usdcReserves: BigNumber }
  >;

  tokenToUSDCPriceFeed(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenReserves(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRewardsAccumulation(
    user: string,
    userTokenBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userToLastUpdateNonce(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userToRewardsToCollect(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawRevenues(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cummulativeReserveProportion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFees(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUSDCPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        usdcReserves: BigNumber;
      }
    >;

    tokenToUSDCPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenReserves(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userRewardsAccumulation(
      user: string,
      userTokenBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToRewardsToCollect(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRevenues(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokensDeposited(address,address,uint256)"(
      token?: string | null,
      depositor?: string | null,
      amount?: null
    ): TokensDepositedEventFilter;
    TokensDeposited(
      token?: string | null,
      depositor?: string | null,
      amount?: null
    ): TokensDepositedEventFilter;

    "TokensWithdrawn(address,address,uint256)"(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
  };

  estimateGas: {
    cummulativeReserveProportion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFees(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSDCPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToUSDCPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenReserves(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRewardsAccumulation(
      user: string,
      userTokenBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToRewardsToCollect(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRevenues(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cummulativeReserveProportion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFees(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSDCPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToUSDCPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenReserves(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRewardsAccumulation(
      user: string,
      userTokenBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userToLastUpdateNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToRewardsToCollect(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRevenues(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
