/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DeterminationContract,
  DeterminationContractInterface,
} from "../DeterminationContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "targetSubgraphDataset",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "targetDatapointCount",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "currentSubgraphDataset",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "currentDatapointCount",
        type: "uint256",
      },
    ],
    name: "calculation",
    outputs: [
      {
        internalType: "bool",
        name: "determination",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102ab806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639646a4dd14610030575b600080fd5b61004361003e366004610172565b610057565b604051901515815260200160405180910390f35b600080805b8681101561009c57888882818110610076576100766101f4565b90506020020135826100889190610220565b91508061009481610238565b91505061005c565b5060006100a98783610253565b90506000805b858110156100ef578787828181106100c9576100c96101f4565b90506020020135826100db9190610220565b9150806100e781610238565b9150506100af565b5060006100fc8683610253565b90508083111561011357600194505050505061011c565b60009450505050505b9695505050505050565b60008083601f84011261013857600080fd5b50813567ffffffffffffffff81111561015057600080fd5b6020830191508360208260051b850101111561016b57600080fd5b9250929050565b6000806000806000806080878903121561018b57600080fd5b863567ffffffffffffffff808211156101a357600080fd5b6101af8a838b01610126565b90985096506020890135955060408901359150808211156101cf57600080fd5b506101dc89828a01610126565b979a9699509497949695606090950135949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156102335761023361020a565b500190565b600060001982141561024c5761024c61020a565b5060010190565b60008261027057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205fdfd4533576abb9147379a7eaf22e9b4bb69e46d17409862a192c35de497d5764736f6c63430008090033";

type DeterminationContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeterminationContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DeterminationContract__factory extends ContractFactory {
  constructor(...args: DeterminationContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DeterminationContract";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DeterminationContract> {
    return super.deploy(overrides || {}) as Promise<DeterminationContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DeterminationContract {
    return super.attach(address) as DeterminationContract;
  }
  connect(signer: Signer): DeterminationContract__factory {
    return super.connect(signer) as DeterminationContract__factory;
  }
  static readonly contractName: "DeterminationContract";
  public readonly contractName: "DeterminationContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeterminationContractInterface {
    return new utils.Interface(_abi) as DeterminationContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeterminationContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DeterminationContract;
  }
}
