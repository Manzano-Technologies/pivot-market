/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SubgraphManager,
  SubgraphManagerInterface,
} from "../SubgraphManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "protocol",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isApproved",
        type: "bool",
      },
    ],
    name: "ApprovalChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "approveSubgraph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "currentPositionBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "depositTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "pivotTargetAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "originalSender",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "depositSuccess",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disapproveSubgraph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "emergencyFundWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "pivotTargetPoolId",
        type: "bytes32",
      },
    ],
    name: "getDepositAddressByPoolId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolToDepositHoldingRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolName",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "URI",
        type: "bytes32",
      },
    ],
    name: "setSubgraphQueryURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateInterestGained",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "subgraphApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "subgraphQueryURI",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
    ],
    name: "targetVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "updateroyaltyUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isPivot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "withdrawSent",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526004805460ff60a01b19169055600060805234801561002257600080fd5b50604051610cfe380380610cfe833981016040819052610041916100b4565b61004a33610064565b600480546001600160a01b031916331790556006556100cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c657600080fd5b5051919050565b608051610c196100e560003960005050610c196000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063ca66d4a011610071578063ca66d4a014610262578063e567e8691461028b578063e60dbb8814610162578063ea00210814610294578063f2fde38b146102a757600080fd5b80638da5cb5b146102055780639ce15f9214610216578063aa9e4e5414610229578063b40f982c1461023c578063c250283c1461024f57600080fd5b80635e166199116100f45780635e1661991461018c57806368abb5e014610194578063715018a6146101b45780637abf0bc8146101bc57806385fd04a8146101fd57600080fd5b80630bff28ec1461012657806320f458db1461014f57806323a708d7146101625780634b97787614610175575b600080fd5b60045461013a90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b61013a61015d366004610a92565b6102ba565b610173610170366004610ad4565b50565b005b61017e60055481565b604051908152602001610146565b61017361048d565b61017e6101a2366004610ad4565b60026020526000908152604090205481565b6101736104df565b6101e56101ca366004610ad4565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610146565b6101736104f3565b6000546001600160a01b03166101e5565b610173610224366004610af8565b610539565b6101e5610237366004610af8565b503090565b61017361024a366004610ad4565b610546565b61013a61025d366004610b11565b610570565b61017e610270366004610ad4565b6001600160a01b031660009081526007602052604090205490565b61017e60065481565b6101736102a2366004610af8565b610768565b6101736102b5366004610ad4565b610856565b336000818152600360205260408120549091906001600160a01b031683861515600114156102e55750815b6001600160a01b03831660009081526002602052604090205461030a848860016108cc565b6001600160a01b038416600090815260026020526040902054871061033457610334846000610997565b808711156103b1576040805162461bcd60e51b81526020600482015260248101919091527f506f6f6c2042616c616e6365206d75737420626520677265617465722074686160448201527f6e206f7220657175616c20746f2072657175657374656420776974686472617760648201526084015b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038381166004830152602482018990526000919085169063a9059cbb90604401602060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104379190610b64565b905060018115151461047e5760405162461bcd60e51b815260206004820152601060248201526f5472616e73666572204661696c65642160801b60448201526064016103a8565b50600198975050505050505050565b6104956109c5565b6004805460ff60a01b1916600160a01b179055604051600181527fbf566f7ffac9cb664ec11d47aa078c63570d0e55e35d5cdaf12510aaf6067919906020015b60405180910390a1565b6104e76109c5565b6104f16000610a1f565b565b6104fb6109c5565b6004805460ff60a01b19169055604051600081527fbf566f7ffac9cb664ec11d47aa078c63570d0e55e35d5cdaf12510aaf6067919906020016104d5565b6105416109c5565b600555565b61054e6109c5565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b336000818152600360205260408120549091906001600160a01b03166105bf576001600160a01b03818116600090815260036020526040902080546001600160a01b0319169187169190911790555b6001600160a01b0381811660009081526003602052604090205481169086161461064a5760405162461bcd60e51b815260206004820152603660248201527f496e76616c6964206465706f736974546f6b656e41646472657373207061737360448201527532b2103a37903232b837b9b4ba10333ab731ba34b7b760511b60648201526084016103a8565b6040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201889052600091908716906323b872dd90606401602060405180830381600087803b15801561069e57600080fd5b505af11580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190610b64565b90506001811515146107215760405162461bcd60e51b81526020600482015260146024820152737472616e7366657246726f6d206661696c65642160601b60448201526064016103a8565b61072d828860006108cc565b6001600160a01b0380831660009081526001602052604090205486821691161461075b5761075b8286610997565b5060019695505050505050565b33610775818360006108cc565b60008190506000816001600160a01b03166323dc9e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b557600080fd5b505afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190610b81565b6040516340c10f1960e01b8152306004820152602481018690529091506001600160a01b038216906340c10f1990604401600060405180830381600087803b15801561083857600080fd5b505af115801561084c573d6000803e3d6000fd5b5050505050505050565b61085e6109c5565b6001600160a01b0381166108c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a8565b61017081610a1f565b60018115151415610937576001600160a01b038316600090815260026020526040812080548492906108ff908490610bb4565b90915550506001600160a01b0383166000908152600760205260408120805484929061092c908490610bb4565b909155506109929050565b6001600160a01b0383166000908152600260205260408120805484929061095f908490610bcb565b90915550506001600160a01b0383166000908152600760205260408120805484929061098c908490610bcb565b90915550505b505050565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146104f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801515811461017057600080fd5b6001600160a01b038116811461017057600080fd5b600080600060608486031215610aa757600080fd5b8335610ab281610a6f565b9250602084013591506040840135610ac981610a7d565b809150509250925092565b600060208284031215610ae657600080fd5b8135610af181610a7d565b9392505050565b600060208284031215610b0a57600080fd5b5035919050565b60008060008060808587031215610b2757600080fd5b843593506020850135610b3981610a7d565b92506040850135610b4981610a7d565b91506060850135610b5981610a7d565b939692955090935050565b600060208284031215610b7657600080fd5b8151610af181610a6f565b600060208284031215610b9357600080fd5b8151610af181610a7d565b634e487b7160e01b600052601160045260246000fd5b600082821015610bc657610bc6610b9e565b500390565b60008219821115610bde57610bde610b9e565b50019056fea2646970667358221220073ccf22142b9bbc4cee70955b8452ad30d73f2ec0674d4e17f8fd39ba13f16f64736f6c63430008090033";

type SubgraphManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubgraphManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubgraphManager__factory extends ContractFactory {
  constructor(...args: SubgraphManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SubgraphManager";
  }

  deploy(
    protocol: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SubgraphManager> {
    return super.deploy(protocol, overrides || {}) as Promise<SubgraphManager>;
  }
  getDeployTransaction(
    protocol: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(protocol, overrides || {});
  }
  attach(address: string): SubgraphManager {
    return super.attach(address) as SubgraphManager;
  }
  connect(signer: Signer): SubgraphManager__factory {
    return super.connect(signer) as SubgraphManager__factory;
  }
  static readonly contractName: "SubgraphManager";
  public readonly contractName: "SubgraphManager";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubgraphManagerInterface {
    return new utils.Interface(_abi) as SubgraphManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubgraphManager {
    return new Contract(address, _abi, signerOrProvider) as SubgraphManager;
  }
}
