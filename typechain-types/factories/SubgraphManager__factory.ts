/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SubgraphManager,
  SubgraphManagerInterface,
} from "../SubgraphManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "protocol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "reserveContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isApproved",
        type: "bool",
      },
    ],
    name: "ApprovalChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "approveSubgraph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "currentPositionValue",
        type: "uint256",
      },
    ],
    name: "currentPoolBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "currentPositionBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "depositTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "pivotTargetAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "originalSender",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "depositSuccess",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "depositsByPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "depositsByPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "disapproveSubgraph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "emergencyFundWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "pivotTargetPoolId",
        type: "bytes32",
      },
    ],
    name: "getDepositAddressByPoolId",
    outputs: [
      {
        internalType: "address",
        name: "depositAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolToDepositHoldingRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolName",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "URI",
        type: "bytes32",
      },
    ],
    name: "setSubgraphQueryURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateInterestGained",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "subgraphApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "subgraphQueryURI",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "targetFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
    ],
    name: "targetVerifier",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "updateroyaltyUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isPivot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "withdrawSent",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526007805460ff60a01b19169055600060805234801561002257600080fd5b5060405161126838038061126883398101604081905261004191610116565b61004a336100c6565b600780546001600160a01b0319163390811790915560098390556040516301160a5b60e51b815260048101919091526001600160a01b038216906322c14b6090602401600060405180830381600087803b1580156100a757600080fd5b505af11580156100bb573d6000803e3d6000fd5b505050505050610153565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561012957600080fd5b825160208401519092506001600160a01b038116811461014857600080fd5b809150509250929050565b6080516110fd61016b600039600050506110fd6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806385fd04a8116100c3578063c250283c1161007c578063c250283c146102ee578063ca66d4a014610301578063e567e8691461032a578063e60dbb8814610333578063ea00210814610347578063f2fde38b1461035a57600080fd5b806385fd04a81461027c5780638da5cb5b146102845780639ce15f9214610295578063a0d2c937146102a8578063aa9e4e54146102c8578063b40f982c146102db57600080fd5b80634b977876116101155780634b977876146101ef5780635e166199146101f857806367651dfe146102005780636935215714610220578063715018a6146102335780637abf0bc81461023b57600080fd5b80630bff28ec1461015257806320f458db1461017b578063228ccff81461018e57806323a708d7146101bc5780634591f2d3146101cf575b600080fd5b60075461016690600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b610166610189366004610f09565b61036d565b6101ae61019c366004610f4b565b60026020526000908152604090205481565b604051908152602001610172565b6101cd6101ca366004610f4b565b50565b005b6101ae6101dd366004610f4b565b60036020526000908152604090205481565b6101ae60085481565b6101cd61068d565b6101ae61020e366004610f4b565b60046020526000908152604090205481565b6101ae61022e366004610f6f565b6106df565b6101cd610768565b610264610249366004610f4b565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610172565b6101cd61077c565b6000546001600160a01b0316610264565b6101cd6102a3366004610f9b565b6107c2565b6101ae6102b6366004610f4b565b60056020526000908152604090205481565b6102646102d6366004610f9b565b503090565b6101cd6102e9366004610f4b565b6107cf565b6101666102fc366004610fb4565b61084f565b6101ae61030f366004610f4b565b6001600160a01b03166000908152600a602052604090205490565b6101ae60095481565b610166610341366004610f4b565b50600090565b6101cd610355366004610f9b565b610b4b565b6101cd610368366004610f4b565b610c85565b336000818152600660205260408120549091906001600160a01b031683861515600114156103985750815b6001600160a01b03838116600090815260016020908152604080832054909316808352600a90915291812054906103cf86836106df565b6001600160a01b0380881660009081526002602090815260408083205493881683526004909152902054919250908a831415610461576001600160a01b03808916600090815260056020908152604080832054938916835260049091528120805490919061043e90849061101d565b90915550506001600160a01b0388166000908152600560205260408120556104ec565b6001600160a01b038089166000908152600560209081526040808320549389168352600490915281205490916104969161101d565b90506104a28286611034565b6104ac908d611034565b6001600160a01b038a1660009081526005602052604090208190556104d19082611056565b6001600160a01b038716600090815260046020526040902055505b6104f988848d6001610cfb565b61050685858d6001610d9e565b6001600160a01b0388166000908152600260205260409020548b1061053057610530886000610e0e565b818b11156105ad576040805162461bcd60e51b81526020600482015260248101919091527f506f6f6c2042616c616e6365206d75737420626520677265617465722074686160448201527f6e206f7220657175616c20746f2072657175657374656420776974686472617760648201526084015b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018d90526000919089169063a9059cbb90604401602060405180830381600087803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610633919061106e565b905060018115151461067a5760405162461bcd60e51b815260206004820152601060248201526f5472616e73666572204661696c65642160801b60448201526064016105a4565b5060019c9b505050505050505050505050565b610695610e3c565b6007805460ff60a01b1916600160a01b179055604051600181527fbf566f7ffac9cb664ec11d47aa078c63570d0e55e35d5cdaf12510aaf6067919906020015b60405180910390a1565b6001600160a01b03808316600090815260016020526040812054909116828061071d57506001600160a01b0381166000908152600a60205260409020545b6001600160a01b03808616600090815260056020908152604080832054938616835260049091528120549091906107549084611034565b61075e919061108b565b9695505050505050565b610770610e3c565b61077a6000610e96565b565b610784610e3c565b6007805460ff60a01b19169055604051600081527fbf566f7ffac9cb664ec11d47aa078c63570d0e55e35d5cdaf12510aaf6067919906020016106d5565b6107ca610e3c565b600855565b6107d7610e3c565b6001600160a01b03811661082d5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742062652073657420746f2061205a45524f20416464726573730060448201526064016105a4565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b336000818152600660205260408120549091906001600160a01b031661089e576001600160a01b03818116600090815260066020526040902080546001600160a01b0319169187169190911790555b6001600160a01b0384166000908152600a6020526040812054906108c283836106df565b6001600160a01b038481166000908152600660205260409020549192508881169116146109505760405162461bcd60e51b815260206004820152603660248201527f496e76616c6964206465706f736974546f6b656e41646472657373207061737360448201527532b2103a37903232b837b9b4ba10333ab731ba34b7b760511b60648201526084016105a4565b6001600160a01b038616600090815260046020526040902054806109a4576001600160a01b038085166000908152600560209081526040808320620f424090819055938b1683526004909152902055610a1c565b6000816109b1858c611034565b6109bb919061108b565b6001600160a01b0386166000908152600560205260408120805492935083929091906109e8908490611056565b90915550506001600160a01b03881660009081526004602052604081208054839290610a15908490611056565b9091555050505b610a2984838b6000610cfb565b610a3687848b6000610d9e565b6001600160a01b03808516600090815260016020526040902054888216911614610a6457610a648488610e0e565b6040516323b872dd60e01b81526001600160a01b038781166004830152306024830152604482018b9052600091908a16906323b872dd90606401602060405180830381600087803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af0919061106e565b9050600181151514610b3b5760405162461bcd60e51b81526020600482015260146024820152737472616e7366657246726f6d206661696c65642160601b60448201526064016105a4565b5060019998505050505050505050565b336000818152600160205260408120546001600160a01b031690610b84826001600160a01b03166000908152600a602052604090205490565b90506000610b9284836106df565b9050610ba18482876000610cfb565b60008490506000816001600160a01b03166323dc9e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1991906110aa565b6040516340c10f1960e01b8152306004820152602481018990529091506001600160a01b038216906340c10f1990604401600060405180830381600087803b158015610c6457600080fd5b505af1158015610c78573d6000803e3d6000fd5b5050505050505050505050565b610c8d610e3c565b6001600160a01b038116610cf25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a4565b6101ca81610e96565b60018115151415610d5157610d10828461101d565b6001600160a01b038516600090815260026020526040902055610d33828461101d565b6001600160a01b0385166000908152600a6020526040902055610d98565b610d5b8284611056565b6001600160a01b038516600090815260026020526040902055610d7e8284611056565b6001600160a01b0385166000908152600a60205260409020555b50505050565b60018115151415610dd157610db3828461101d565b6001600160a01b038516600090815260036020526040902055610d98565b610ddb828461101d565b6001600160a01b03851660009081526003602052604081208054909190610e03908490611056565b909155505050505050565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b0316331461077a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80151581146101ca57600080fd5b6001600160a01b03811681146101ca57600080fd5b600080600060608486031215610f1e57600080fd5b8335610f2981610ee6565b9250602084013591506040840135610f4081610ef4565b809150509250925092565b600060208284031215610f5d57600080fd5b8135610f6881610ef4565b9392505050565b60008060408385031215610f8257600080fd5b8235610f8d81610ef4565b946020939093013593505050565b600060208284031215610fad57600080fd5b5035919050565b60008060008060808587031215610fca57600080fd5b843593506020850135610fdc81610ef4565b92506040850135610fec81610ef4565b91506060850135610ffc81610ef4565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b60008282101561102f5761102f611007565b500390565b60008261105157634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561106957611069611007565b500190565b60006020828403121561108057600080fd5b8151610f6881610ee6565b60008160001904831182151516156110a5576110a5611007565b500290565b6000602082840312156110bc57600080fd5b8151610f6881610ef456fea2646970667358221220d7cb5c4904401b9db458eaf1b15604ee9e292af53d6c75c011157ab0d0eaa1d164736f6c63430008090033";

type SubgraphManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubgraphManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubgraphManager__factory extends ContractFactory {
  constructor(...args: SubgraphManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SubgraphManager";
  }

  deploy(
    protocol: BytesLike,
    reserveContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SubgraphManager> {
    return super.deploy(
      protocol,
      reserveContract,
      overrides || {}
    ) as Promise<SubgraphManager>;
  }
  getDeployTransaction(
    protocol: BytesLike,
    reserveContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      protocol,
      reserveContract,
      overrides || {}
    );
  }
  attach(address: string): SubgraphManager {
    return super.attach(address) as SubgraphManager;
  }
  connect(signer: Signer): SubgraphManager__factory {
    return super.connect(signer) as SubgraphManager__factory;
  }
  static readonly contractName: "SubgraphManager";
  public readonly contractName: "SubgraphManager";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubgraphManagerInterface {
    return new utils.Interface(_abi) as SubgraphManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubgraphManager {
    return new Contract(address, _abi, signerOrProvider) as SubgraphManager;
  }
}
