/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SubgraphManager,
  SubgraphManagerInterface,
} from "../SubgraphManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isApproved",
        type: "bool",
      },
    ],
    name: "ApprovalChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "approveSubgraph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "currentPositionBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "depositSuccess",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disapproveSubgraph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "emergencyFundWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "pivotTargetPoolId",
        type: "bytes32",
      },
    ],
    name: "getDepositAddressByPoolId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolToDepositAmounts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolToDepositHoldingRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "URI",
        type: "bytes32",
      },
    ],
    name: "setSubgraphQueryURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "subgraphApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "subgraphQueryURI",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
    ],
    name: "targetVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "updateroyaltyUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "withdrawSuccess",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "destinationAddress",
        type: "address",
      },
    ],
    name: "withdrawToPoolAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526003805460ff60a01b19169055600060805234801561002257600080fd5b5061002c33610043565b600380546001600160a01b03191633179055610093565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805161066d6100ab6000396000505061066d6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063b6b55f2511610071578063b6b55f2514610238578063c749ceb71461024b578063ca66d4a01461026b578063e60dbb8814610159578063f2fde38b1461028c57600080fd5b80638da5cb5b146101ed5780639ce15f92146101fe578063aa9e4e5414610211578063b40f982c1461022557600080fd5b80634b977876116100e95780634b9778761461017d5780635e16619914610194578063715018a61461019c5780637abf0bc8146101a457806385fd04a8146101e557600080fd5b80630a7837711461011b5780630bff28ec1461013057806323a708d7146101595780632e1a7d4d1461016a575b600080fd5b61012e6101293660046105a9565b61029f565b005b60035461014490600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b61012e6101673660046105a9565b50565b6101446101783660046105d9565b6102a7565b61018660045481565b604051908152602001610150565b61012e6102c5565b61012e610317565b6101cd6101b23660046105a9565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610150565b61012e61032b565b6000546001600160a01b03166101cd565b61012e61020c3660046105d9565b610371565b6101cd61021f3660046105d9565b50600090565b61012e6102333660046105a9565b61037e565b6101446102463660046105d9565b6103a8565b6101866102593660046105a9565b60026020526000908152604090205481565b61012e6102793660046105a9565b6001600160a01b03166000526001602052565b61012e61029a3660046105a9565b6103e5565b610167610460565b60006102b5338360016104ba565b6102c033600061052b565b919050565b6102cd610460565b6003805460ff60a01b1916600160a01b179055604051600181527fbf566f7ffac9cb664ec11d47aa078c63570d0e55e35d5cdaf12510aaf6067919906020015b60405180910390a1565b61031f610460565b6103296000610559565b565b610333610460565b6003805460ff60a01b19169055604051600081527fbf566f7ffac9cb664ec11d47aa078c63570d0e55e35d5cdaf12510aaf60679199060200161030d565b610379610460565b600455565b610386610460565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604081205430906001600160a01b031681146103df576103d3338261052b565b6103df338460006104ba565b50919050565b6103ed610460565b6001600160a01b0381166104575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61016781610559565b6000546001600160a01b031633146103295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044e565b600181151514156104f8576001600160a01b038316600090815260026020526040812080548492906104ed908490610608565b909155506105269050565b6001600160a01b0383166000908152600260205260408120805484929061052090849061061f565b90915550505b505050565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156105bb57600080fd5b81356001600160a01b03811681146105d257600080fd5b9392505050565b6000602082840312156105eb57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561061a5761061a6105f2565b500390565b60008219821115610632576106326105f2565b50019056fea2646970667358221220929f6cb39c367cfb238531f873da66a7df4cd1413f9f0a1420764dcda936862564736f6c63430008090033";

type SubgraphManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubgraphManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubgraphManager__factory extends ContractFactory {
  constructor(...args: SubgraphManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SubgraphManager";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SubgraphManager> {
    return super.deploy(overrides || {}) as Promise<SubgraphManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SubgraphManager {
    return super.attach(address) as SubgraphManager;
  }
  connect(signer: Signer): SubgraphManager__factory {
    return super.connect(signer) as SubgraphManager__factory;
  }
  static readonly contractName: "SubgraphManager";
  public readonly contractName: "SubgraphManager";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubgraphManagerInterface {
    return new utils.Interface(_abi) as SubgraphManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubgraphManager {
    return new Contract(address, _abi, signerOrProvider) as SubgraphManager;
  }
}
