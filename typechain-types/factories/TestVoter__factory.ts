/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestVoter, TestVoterInterface } from "../TestVoter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "governorAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610129806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635f74bbde14602d575b600080fd5b603c603836600460bd565b603e565b005b604051637b3c71d360e01b815260048101829052600060248201526060604482015260056064820152645a4545474160d81b60848201526001600160a01b03831690637b3c71d39060a401600060405180830381600087803b15801560a257600080fd5b505af115801560b5573d6000803e3d6000fd5b505050505050565b6000806040838503121560cf57600080fd5b82356001600160a01b038116811460e557600080fd5b94602093909301359350505056fea264697066735822122082b79e7011d9242211d038c075d762bc260b2ac6790ba366ad2ddc20547d912364736f6c63430008090033";

type TestVoterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestVoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestVoter__factory extends ContractFactory {
  constructor(...args: TestVoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestVoter";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestVoter> {
    return super.deploy(overrides || {}) as Promise<TestVoter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestVoter {
    return super.attach(address) as TestVoter;
  }
  connect(signer: Signer): TestVoter__factory {
    return super.connect(signer) as TestVoter__factory;
  }
  static readonly contractName: "TestVoter";
  public readonly contractName: "TestVoter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestVoterInterface {
    return new utils.Interface(_abi) as TestVoterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestVoter {
    return new Contract(address, _abi, signerOrProvider) as TestVoter;
  }
}
