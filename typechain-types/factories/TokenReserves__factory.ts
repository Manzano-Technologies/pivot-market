/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenReserves, TokenReservesInterface } from "../TokenReserves";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensWithdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "cummulativeReserveProportion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    name: "setUSDCPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "usdcReserves",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenToUSDCPriceFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "updateTokenReserves",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "userTokenBalance",
        type: "uint256",
      },
    ],
    name: "userRewardsAccumulation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userToLastUpdateNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userToRewardsToCollect",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawRevenues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060025534801561001557600080fd5b50604051610e46380380610e46833981016040819052610034916100de565b61003d3361008e565b600080805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df55600180546001600160a01b0319166001600160a01b039290921691909117905561010e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100f057600080fd5b81516001600160a01b038116811461010757600080fd5b9392505050565b610d298061011d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636c65863b1161008c578063a71532cd11610066578063a71532cd146101eb578063d92f3b3c146101fe578063f2660a2f14610211578063f2fde38b1461023a57600080fd5b80636c65863b1461019e578063715018a6146101be5780638da5cb5b146101c657600080fd5b806339489c91146100d45780634acc8e5a146100e95780634c4a3c4e146100fc5780635077de571461010f578063523fba7f146101425780635d2815d61461017e575b600080fd5b6100e76100e2366004610a34565b61024d565b005b6100e76100f7366004610a5e565b6102ec565b6100e761010a366004610a91565b610322565b61012f61011d366004610ab3565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b610169610150366004610a91565b6003602052600090815260409020805460019091015482565b60408051928352602083019190915201610139565b61012f61018c366004610a91565b60066020526000908152604090205481565b61012f6101ac366004610a91565b60056020526000908152604090205481565b6100e7610517565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610139565b6100e76101f9366004610a34565b61052b565b6100e761020c366004610a34565b6106d1565b6101d361021f366004610a91565b6004602052600090815260409020546001600160a01b031681565b6100e7610248366004610a91565b6108f5565b6001600160a01b03821660009081526006602090815260408083205483526007909152808220546002548352908220546102879190610ae2565b905060006102958284610af9565b6001600160a01b0385166000908152600560205260408120805492935083929091906102c2908490610b18565b90915550506002546001600160a01b03909416600090815260066020526040902093909355505050565b6102f461096e565b6001600160a01b03918216600090815260046020526040902080546001600160a01b03191691909216179055565b6001600160a01b038181166000908152600460205260409020541661038e5760405162461bcd60e51b815260206004820152601c60248201527f50726963652066656564206e6f742073657420666f7220746f6b656e0000000060448201526064015b60405180910390fd5b6001600160a01b03808216600090815260046020818152604080842054815163313ce56760e01b81529151951694859363313ce567938382019390929190829003018186803b1580156103e057600080fd5b505afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104189190610b30565b60ff1690506000826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610b6d565b505050915050600082600a6104a59190610ca3565b6001600160a01b0386166000908152600360205260409020546104c9908490610af9565b6104d39190610caf565b6001600160a01b03958616600090815260036020908152604080832060010193909355600490522080546001600160a01b0319169490951693909317909355505050565b61051f61096e565b61052960006109c8565b565b6000811161057b5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610385565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd90606401602060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106019190610cd1565b506001600160a01b0382166000908152600360205260408120805483929061062a908490610b18565b925050819055506001600260008282546106449190610b18565b9250508190555060076000600160025461065e9190610ae2565b815260200190815260200160002054816106789190610b18565b600254600090815260076020908152604091829020929092555182815233916001600160a01b038516917fcbc4a4091b012bb1329c38bbbb15455f5cac5aa3673da0a7f38cd61a4f495517910160405180910390a35050565b600081116107215760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610385565b6001600160a01b0382166000908152600360205260409020548111156107805760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610385565b336000908152600560205260409020548111156107d65760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610385565b6001600160a01b038216600090815260036020526040812080548392906107fe908490610ae2565b90915550503360009081526005602052604081208054839290610822908490610ae2565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190610cd1565b5060405181815233906001600160a01b038416907f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a49060200160405180910390a36108f182610322565b5050565b6108fd61096e565b6001600160a01b0381166109625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610385565b61096b816109c8565b50565b6000546001600160a01b031633146105295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610385565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a2f57600080fd5b919050565b60008060408385031215610a4757600080fd5b610a5083610a18565b946020939093013593505050565b60008060408385031215610a7157600080fd5b610a7a83610a18565b9150610a8860208401610a18565b90509250929050565b600060208284031215610aa357600080fd5b610aac82610a18565b9392505050565b600060208284031215610ac557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610af457610af4610acc565b500390565b6000816000190483118215151615610b1357610b13610acc565b500290565b60008219821115610b2b57610b2b610acc565b500190565b600060208284031215610b4257600080fd5b815160ff81168114610aac57600080fd5b805169ffffffffffffffffffff81168114610a2f57600080fd5b600080600080600060a08688031215610b8557600080fd5b610b8e86610b53565b9450602086015193506040860151925060608601519150610bb160808701610b53565b90509295509295909350565b600181815b80851115610bf8578160001904821115610bde57610bde610acc565b80851615610beb57918102915b93841c9390800290610bc2565b509250929050565b600082610c0f57506001610c9d565b81610c1c57506000610c9d565b8160018114610c325760028114610c3c57610c58565b6001915050610c9d565b60ff841115610c4d57610c4d610acc565b50506001821b610c9d565b5060208310610133831016604e8410600b8410161715610c7b575081810a610c9d565b610c858383610bbd565b8060001904821115610c9957610c99610acc565b0290505b92915050565b6000610aac8383610c00565b600082610ccc57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610ce357600080fd5b81518015158114610aac57600080fdfea264697066735822122014a55fd4abea5c9ac5808a61496b5970b1b26c440c9c63d95b4f3f87ba71447164736f6c63430008090033";

type TokenReservesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenReservesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenReserves__factory extends ContractFactory {
  constructor(...args: TokenReservesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TokenReserves";
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenReserves> {
    return super.deploy(token, overrides || {}) as Promise<TokenReserves>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): TokenReserves {
    return super.attach(address) as TokenReserves;
  }
  connect(signer: Signer): TokenReserves__factory {
    return super.connect(signer) as TokenReserves__factory;
  }
  static readonly contractName: "TokenReserves";
  public readonly contractName: "TokenReserves";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenReservesInterface {
    return new utils.Interface(_abi) as TokenReservesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenReserves {
    return new Contract(address, _abi, signerOrProvider) as TokenReserves;
  }
}
